{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","username","name","avatar","location","repos","fetch","API","then","result","json","data","console","log","setState","login","avatar_url","public_repos","followers","following","homeUrl","html_url","notFound","message","catch","err","this","fetchProfile","className","id","bind","Component","SearchProfile","onSubmit","handleForm","type","ref","search","placeholder","e","preventDefault","value","Profile","repositories","href","target","title","src","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2QAMqBA,G,kBACnB,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACXC,SAAS,WACTC,KAAK,GACLC,OAAO,GACPC,SAAS,GACTC,MAAM,GACN,UAAY,GACZ,UAAY,GACZ,QAAU,GACV,SAAW,IAZI,E,0EAgBNJ,GAAU,IAAD,OAEpBK,MADUC,gCAAQN,GAEjBO,MAAK,SAACC,GACL,OAAOA,EAAOC,UAEfF,MAAK,SAACG,GACLC,QAAQC,IAAIF,GAEZ,EAAKG,SAAS,CACZb,SAASU,EAAKI,MACdb,KAAKS,EAAKT,KACVC,OAAOQ,EAAKK,WACZZ,SAASO,EAAKP,SACdC,MAAMM,EAAKM,aACXC,UAAUP,EAAKO,UACfC,UAAUR,EAAKQ,UACfC,QAAQT,EAAKU,SACbC,SAASX,EAAKY,aAGjBC,OAAM,SAACC,GACNb,QAAQC,IAAI,8BAA8BY,Q,0CAK5Cb,QAAQC,IAAI,aACZa,KAAKC,aAAaD,KAAK1B,MAAMC,Y,+BAK7B,OACE,yBAAK2B,UAAU,OACf,6BAASC,GAAG,QACV,kBAAC,EAAD,CAAeF,aAAeD,KAAKC,aAAaG,KAAKJ,QACrD,kBAAC,EAAD,CAASf,KAAMe,KAAK1B,c,GAtDK+B,cA8DpBC,EAAb,iLACY,IAAD,OACP,OACE,yBAAKJ,UAAU,eACb,0BAAMK,SAAUP,KAAKQ,WAAWJ,KAAKJ,OACnC,+BACE,2BAAOS,KAAK,SAASC,IAAK,SAACA,GAAD,OAAO,EAAKC,OAAOD,GAC7CE,YAAY,kEAPxB,iCAaaC,GACTA,EAAEC,iBACF,IAAIvC,EAASyB,KAAKW,OAAOI,MACzBf,KAAK3B,MAAM4B,aAAa1B,GACxByB,KAAKW,OAAOI,MAAM,OAjBtB,GAAmCV,aAqBtBW,EAAb,iLAEI,IAAI/B,EAAKe,KAAK3B,MAAMY,KAChBO,EAAU,GAAD,OAAIP,EAAKS,QAAT,cACTD,EAAU,GAAD,OAAIR,EAAKS,QAAT,cACTuB,EAAY,UAAMhC,EAAKS,QAAX,qBAChB,MAAoB,cAAhBT,EAAKW,SAEL,yBAAKM,UAAU,YACb,sCACA,uGAIJhB,QAAQC,MAGR,6BAASe,UAAU,mBACjB,yBAAKA,UAAU,yBACb,uBAAGgB,KAAMjC,EAAKS,QAASyB,OAAO,SAASC,MAAOnC,EAAKT,MACjD,yBAAK6C,IAAKpC,EAAKR,UAEjB,4BACE,uBAAGyC,KAAMjC,EAAKS,QAASyB,OAAO,WAAclC,EAAKT,MAEnD,4BACGS,EAAKP,UAAY,sBAGtB,yBAAKwB,UAAU,0BACb,4BACE,4BACE,uBAAGgB,KAAM1B,EAAW2B,OAAO,SAASC,MAAM,uBAAsB,2BAAInC,EAAKO,WAAc,8CAEzF,4BACE,uBAAG0B,KAAMD,EAAcE,OAAO,SAASC,MAAM,0BAAyB,2BAAInC,EAAKN,OAAU,iDAE3F,4BACE,uBAAGuC,KAAMzB,EAAW0B,OAAO,SAASC,MAAM,uBAAsB,2BAAInC,EAAKQ,WAAc,sDAtCrG,GAA6BY,aC7ETiB,QACW,cAA7BC,OAAO7C,SAAS8C,UAEe,UAA7BD,OAAO7C,SAAS8C,UAEhBD,OAAO7C,SAAS8C,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlD,MAAK,SAAAmD,GACjCA,EAAaC,iB","file":"static/js/main.1a2586bd.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\n//API users from github\nconst API =\"https://api.github.com/users\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props)\n  \n    this.state = {\n      username:\"facebook\",\n      name:\"\",\n      avatar:\"\",\n      location:\"\",\n      repos:\"\",\n      \"followers\":\"\",\n      \"following\":\"\",\n      \"homeUrl\":\"\",\n      \"notFound\":\"\"\n    }\n  }\n\n  fetchProfile(username){\n    let url = API+'/'+username;\n    fetch(url)\n    .then((result)=>{\n      return result.json() \n    })\n    .then((data)=>{\n      console.log(data);\n      \n      this.setState({\n        username:data.login,\n        name:data.name,\n        avatar:data.avatar_url,\n        location:data.location,\n        repos:data.public_repos,\n        followers:data.followers,\n        following:data.following,\n        homeUrl:data.html_url,\n        notFound:data.message\n      })\n    })\n    .catch((err)=>{\n      console.log(\"Ups... there is a problem! \",err);\n    })\n  }\n  \n  componentDidMount() {\n    console.log(\"did mount\");\n    this.fetchProfile(this.state.username);\n  }\n  \n\n  render() {\n    return (\n      <div className=\"App\">\n      <section id=\"card\">\n        <SearchProfile fetchProfile ={this.fetchProfile.bind(this)}/>\n        <Profile data={this.state} />\n      </section>\n      </div>\n    )\n  }\n}\n\n\nexport class SearchProfile extends Component {\n  render() {\n    return (\n      <div className=\"search--box\">\n        <form onSubmit={this.handleForm.bind(this)}>\n          <label>\n            <input type=\"search\" ref={(ref)=>this.search=ref}\n            placeholder=\"Please type a username and Enter(example \\'facebook\\')\"/>\n          </label>\n        </form>\n      </div>\n    )\n  }\n  handleForm(e){\n    e.preventDefault();\n    let username=this.search.value;\n    this.props.fetchProfile(username);\n    this.search.value=\"\";\n  }\n}\n\nexport class Profile extends Component {\n  render() {\n    let data=this.props.data;\n    let followers=`${data.homeUrl}/followers`;\n    let following=`${data.homeUrl}/following`;\n    let repositories = `${data.homeUrl}?tab=repositories`;\n    if (data.notFound==='Not Found'){\n      return (\n        <div className=\"notfound\">\n          <h4>Ups..!</h4>\n          <p> the component that you are looking for is not found, please try again</p>\n        </div>\n      )\n    }else{\n      console.log()\n    }\n    return (\n      <section className=\"github--profile\">\n        <div className=\"github--profile__info\">\n          <a href={data.homeUrl} target='_blank' title={data.name}>\n            <img src={data.avatar}/>\n          </a>\n          <h2>\n            <a href={data.homeUrl} target='_blank'></a>{data.name}\n          </h2>\n          <h3>\n            {data.location || 'I live In My Mind'}\n          </h3>\n        </div>\n        <div className=\"github--profile__state\">\n          <ul>\n            <li>\n              <a href={followers} target='_blank' title=\"Number of Followers\"><i>{data.followers}</i><span> Followers</span></a>\n            </li>\n            <li>\n              <a href={repositories} target='_blank' title=\"Number of repositories\"><i>{data.repos}</i><span> Repositories</span></a>\n            </li>\n            <li>\n              <a href={following} target='_blank' title=\"Number of Following\"><i>{data.following}</i><span> Following</span></a>\n            </li>\n          </ul>\n        </div>\n      </section>\n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}